{"version":3,"sources":["components/List/list.module.css","redux/tasks/contactAction.js","redux/tasks/taskReducer.js","redux/store.js","components/Appbar/index.js","components/Form/Form.js","components/List/List.js","components/Filter/Filter.js","App.js","index.js"],"names":["module","exports","addContact","createAction","name","number","payload","contact","id","uuidv4","removeContact","changeFilter","contacts","createReducer","contactsActions","state","action","filter","combineReducers","store","configureStore","reducer","contactsReducer","Appbar","CSSTransition","in","appear","classNames","timeout","ContactForm","handleChange","e","target","value","setState","handleSubmit","preventDefault","props","onAddContact","this","className","onSubmit","htmlFor","type","onChange","Component","mapDispatchToProps","contactAction","connect","ContactList","onRemove","TransitionGroup","component","map","key","contactsList","unmountOnExit","onClick","contack","toLowerCase","includes","PropsTypes","node","string","isRequired","func","onChangeFilter","items","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.11667fcb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"list_enter__1cmRJ\",\"enterActive\":\"list_enterActive__3gKeK\",\"exit\":\"list_exit__2EIal\",\"exitActive\":\"list_exitActive__3tWse\"};","import { v4 as uuidv4 } from \"uuid\";\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst addContact = createAction(\"contact / add\", (name, number) => ({\r\n  payload: { contact: { id: uuidv4(), name, number } },\r\n}));\r\n\r\nconst removeContact = createAction(\"contact/remove\");\r\nconst changeFilter = createAction(\"filter/change\");\r\n\r\nexport default { addContact, removeContact, changeFilter };\r\n","/*import { combineReducers } from \"react-redux\";\r\nimport contactAction from \"./contactAction\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\n\r\nconst addContact = (state, action) => {\r\n  return [...state, action.payload.contact];\r\n};\r\nconst removeContact = (state, action) => {\r\n  return state.filter((contact) => contact.id !== action.payload);\r\n};\r\nconst contacts = createReducer([], {\r\n  [contactAction.addContact]: addContact,\r\n  [contactAction.removeContact]: removeContact,\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [contactAction.changeFilter]: (state, action) => action.payload,\r\n});\r\n\r\nexport default combineReducers({ contacts, filter });*/\r\n\r\nimport { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport contactsActions from \"./contactAction\";\r\n\r\nconst addContact = (state, action) => {\r\n  return [...state, action.payload.contact];\r\n};\r\nconst removeContact = (state, action) => {\r\n  return state.filter((contact) => contact.id !== action.payload);\r\n};\r\n\r\nconst contacts = createReducer([], {\r\n  [contactsActions.addContact]: addContact,\r\n  [contactsActions.removeContact]: removeContact,\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [contactsActions.changeFilter]: (state, action) => action.payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  contacts,\r\n  filter,\r\n});\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport contactsReducer from \"./tasks/taskReducer\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport \"./heading.css\";\r\n\r\nconst Appbar = () => (\r\n  <CSSTransition in={true} appear={true} classNames=\"title\" timeout={500}>\r\n    <h1>Phonebook</h1>\r\n  </CSSTransition>\r\n);\r\n\r\nexport default Appbar;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport contactAction from \"../../redux/tasks/contactAction\";\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { name, number } = this.state;\r\n    if (name && number) {\r\n      this.props.onAddContact(name, number);\r\n      this.setState({ name: \"\", number: \"\" });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <>\r\n        <form className=\"contact-form\" onSubmit={this.handleSubmit}>\r\n          <label htmlFor=\"name\">Name</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"name\"\r\n            name=\"name\"\r\n            value={name}\r\n            onChange={this.handleChange}\r\n          />\r\n          <label htmlFor=\"phone\">Phone</label>\r\n\r\n          <input\r\n            type=\"text\"\r\n            id=\"phone\"\r\n            name=\"number\"\r\n            value={number}\r\n            onChange={this.handleChange}\r\n          />\r\n\r\n          <button type=\"submit\">Add contact</button>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  onAddContact: contactAction.addContact,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n","import React from \"react\";\r\nimport PropsTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport contactAction from \"../../redux/tasks/contactAction\";\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\n\r\nimport contactsList from \"./list.module.css\";\r\n\r\nconst ContactList = ({ contacts, onRemove }) => {\r\n  return (\r\n    <TransitionGroup component=\"ul\">\r\n      {contacts.map((contact) => (\r\n        <CSSTransition\r\n          key={contact.id}\r\n          classNames={contactsList}\r\n          timeout={250}\r\n          unmountOnExit\r\n        >\r\n          <li className=\"contacts-item\">\r\n            {contact.name} : {contact.number}\r\n            <button onClick={() => onRemove(contact.id)}> X </button>\r\n          </li>\r\n        </CSSTransition>\r\n      ))}\r\n    </TransitionGroup>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { contacts, filter } = state.contacts;\r\n  const visibleContacts = contacts.filter((contack) =>\r\n    contack.name.toLowerCase().includes(filter.toLowerCase())\r\n  );\r\n  return {\r\n    contacts: visibleContacts,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  onRemove: contactAction.removeContact,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n\r\nContactList.PropsTypes = {\r\n  contacts: (PropsTypes.node = {\r\n    id: PropsTypes.string,\r\n    name: PropsTypes.string.isRequired,\r\n    number: PropsTypes.string.isRequired,\r\n  }),\r\n  onRemove: PropsTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport contactAction from \"../../redux/tasks/contactAction\";\r\n\r\nconst Filter = ({ value, onChangeFilter }) => (\r\n  <div className=\"filter-container\">\r\n    <label htmlFor=\"filter\">Find contacts by name</label>\r\n    <input\r\n      type=\"text\"\r\n      id=\"filter\"\r\n      value={value}\r\n      onChange={(e) => onChangeFilter(e.target.value)}\r\n    />\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = (state) => ({\r\n  value: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onChangeFilter: contactAction.changeFilter,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChangeFilter: PropTypes.func,\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Appbar from \"./components/Appbar/index\";\r\nimport ContactForm from \"./components/Form/Form\";\r\nimport ContactList from \"./components/List/List\";\r\nimport Filter from \"./components/Filter/Filter\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"pnohebook-container\">\r\n      <Appbar />\r\n      <ContactForm />\r\n      <Filter />\r\n      <ContactList />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    contacts: state.contacts.items,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(App);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./redux/store\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}